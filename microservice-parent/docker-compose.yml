version: '3.9'

services:
  
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    image: api-gateway
    container_name: api-gateway
    ports:
      - "9000:9000"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/spring-microservices-security-realm
    depends_on:
      - product-service
      - order-service
      - inventory-service
      - keycloak
    networks:
      - spring

  product-service:
    image: product-service
    ports:
      - "8086:8086"
    build:
      context: ./product-service
      dockerfile: ./Dockerfile
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb-product
    networks:
      - spring

  order-service:
    image: order-service
    build:
      context: ./order-service
      dockerfile: ./Dockerfile
    ports:
      - "8087:8087"
    container_name: order-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-order
    networks:
      - spring

  inventory-service:
    image: inventory-service
    build:
      context: ./inventory-service
      dockerfile: ./Dockerfile
    ports:
      - "8088:8088"
    container_name: inventory-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-inventory
    networks:
      - spring

  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring

  postgres-keycloak:
    image: postgres
    ports:
      - "5431:5432"
    container_name: postgres-keycloak
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-keycloak-data:/var/lib/postgresql/data
    networks:
      - spring

  mongodb-product:
    image: mongo:latest
    container_name: mongodb-product
    ports:
      - "27019:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongodb-product-data:/data/db
      - ./init/product/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - spring

  mongo-express-product:
    image: mongo-express
    ports:
      - "8082:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb-product
    container_name: mongo-express-product
    depends_on:
      - mongodb-product
    networks:
      - spring

  postgres-order:
    image: postgres
    ports:
      - "5432:5432"
    container_name: postgres-order
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
      - ./init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  postgres-inventory:
    image: postgres
    ports:
      - "5433:5432"
    container_name: postgres-inventory
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-inventory-data:/var/lib/postgresql/data
      - ./init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    container_name: pgadmin-comp3095
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    networks:
      - spring

volumes:
  mongodb-product-data:
    driver: local
  postgres-order-data:
    driver: local
  postgres-inventory-data:
    driver: local
  postgres-keycloak-data:
    driver: local

networks:
  spring:
    driver: bridge
